diff -rupN snapper-0.1.7.old/snapper/Acls.cc snapper-0.1.7/snapper/Acls.cc
--- snapper-0.1.7.old/snapper/Acls.cc	1970-01-01 01:00:00.000000000 +0100
+++ snapper-0.1.7/snapper/Acls.cc	2014-02-25 15:58:48.404755058 +0100
@@ -0,0 +1,143 @@
+/*
+ * Copyright (c) [2014] Red Hat, Inc.
+ *
+ * All Rights Reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of version 2 of the GNU General Public License as published
+ * by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ */
+
+#include <fcntl.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+
+#include "snapper/Acls.h"
+#include "snapper/AppUtil.h"
+#include "snapper/Exception.h"
+#include "snapper/Log.h"
+#include "snapper/SnapperTmpl.h"
+
+namespace snapper
+{
+    bool
+    is_acl_signature(const std::string& name)
+    {
+	return contains(_acl_signatures, name);
+    }
+
+    Acls::Acls(const string& path)
+    : allowed_types(0x0), acl_access(NULL), acl_default(NULL)
+    {
+	struct stat buf;
+
+	int fd = ::open(path.c_str(), O_RDONLY | O_NOFOLLOW | O_NONBLOCK | O_NOATIME |
+			  O_CLOEXEC);
+	if (fd < 0)
+	{
+	    if (errno == ELOOP)
+	    {
+		y2deb("can't read ACLs from symlink '" << path << "' itself");
+		return;
+	    }
+
+	    if (stat(path.c_str(), &buf) < 0)
+	    {
+		y2err("stat failed errno: " << errno << " (" << stringerror(errno) << ")");
+		throw AclException();
+	    }
+	}
+	else
+	{
+	    if (fstat(fd, &buf) < 0)
+	    {
+		y2err("fstat failed errno: " << errno << " (" << stringerror(errno) << ")");
+		::close(fd);
+		throw AclException();
+	    }
+
+	    acl_access = acl_get_fd(fd);
+	    if (!acl_access)
+	    {
+		y2err("acl_get_fd failed errno: " << errno << " (" << stringerror(errno) << ")");
+		::close(fd);
+		throw AclException();
+	    }
+
+	    ::close(fd);
+	    allowed_types = ACL_TYPE_ACCESS;
+	}
+
+	allowed_types |= (S_ISDIR(buf.st_mode)) ? ACL_TYPE_DEFAULT : 0x0;
+
+	// in case open failed for some reason
+	if (!(allowed_types & ACL_TYPE_ACCESS))
+	{
+	    allowed_types |= ACL_TYPE_ACCESS;
+	    acl_access = acl_get_file(path.c_str(), ACL_TYPE_ACCESS);
+	    if (!acl_access)
+	    {
+		y2err("acl_get_file failed errno: " << errno << " (" << stringerror(errno) << ")");
+		throw AclException();
+	    }
+	}
+
+	// ACL_TYPE_DEFAULT can't be read from fd
+	if (allowed_types & ACL_TYPE_DEFAULT)
+	{
+	    acl_default = acl_get_file(path.c_str(), ACL_TYPE_DEFAULT);
+	    if (!acl_default)
+	    {
+		y2err("acl_get_file failed errno: " << errno << " (" << stringerror(errno) << ")");
+		if (acl_free(acl_access))
+		{
+		    y2err("acl_free failed errno: " << errno << " (" << stringerror(errno) << ")");
+		}
+
+		throw AclException();
+	    }
+	}
+    }
+
+
+    Acls::~Acls()
+    {
+	if (acl_access)
+	    acl_free(acl_access);
+	if (acl_default)
+	    acl_free(acl_default);
+    }
+
+
+    void
+    Acls::serializeTo(const string& path) const
+    {
+	if (empty())
+	    return;
+
+	if (acl_set_file(path.c_str(), ACL_TYPE_ACCESS, acl_access))
+	{
+	    y2err("acl_set_file failed errno: " << errno << " (" << stringerror(errno) << ")");
+	    throw AclException();
+	}
+
+	if (get_acl_types() & ACL_TYPE_DEFAULT)
+	{
+	    if (acl_set_file(path.c_str(), ACL_TYPE_DEFAULT, acl_default))
+	    {
+		y2err("acl_set_file failed errno: " << errno << " (" << stringerror(errno) << ")");
+		throw AclException();
+	    }
+	}
+    }
+}
diff -rupN snapper-0.1.7.old/snapper/Acls.h snapper-0.1.7/snapper/Acls.h
--- snapper-0.1.7.old/snapper/Acls.h	1970-01-01 01:00:00.000000000 +0100
+++ snapper-0.1.7/snapper/Acls.h	2014-02-25 15:58:48.404755058 +0100
@@ -0,0 +1,64 @@
+/*
+ * Copyright (c) [2014] Red Hat, Inc.
+ *
+ * All Rights Reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of version 2 of the GNU General Public License as published
+ * by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ */
+
+#ifndef SNAPPER_ACLS_H
+#define SNAPPER_ACLS_H
+
+#include <string>
+#include <vector>
+#include <sys/acl.h>
+
+#include <boost/assign/list_of.hpp>
+
+#ifndef ENABLE_ACL_SIGNATURES
+#define ENABLE_ACL_SIGNATURES	("system.posix_acl_access") \
+				("system.posix_acl_default") \
+				("trusted.SGI_ACL_FILE") \
+				("trusted.SGI_ACL_DEFAULT")
+#endif
+
+namespace snapper
+{
+    using std::string;
+
+    const std::vector<string> _acl_signatures = boost::assign::list_of ENABLE_ACL_SIGNATURES;
+
+    bool is_acl_signature(const string& name);
+
+    class Acls
+    {
+    public:
+
+	Acls(const string& path);
+	~Acls();
+
+	acl_type_t get_acl_types() const { return allowed_types; }
+	bool empty() const { return allowed_types == 0x0; }
+	void serializeTo(const string& path) const;
+
+    private:
+
+	acl_type_t allowed_types;
+	acl_t acl_access;
+	acl_t acl_default;
+    };
+
+}
+#endif //SNAPPER_ACLS_H
diff -rupN snapper-0.1.7.old/snapper/Btrfs.cc snapper-0.1.7/snapper/Btrfs.cc
--- snapper-0.1.7.old/snapper/Btrfs.cc	2014-02-25 15:58:19.706868125 +0100
+++ snapper-0.1.7/snapper/Btrfs.cc	2014-02-25 15:58:48.405755054 +0100
@@ -47,6 +47,7 @@
 #include "snapper/Snapper.h"
 #include "snapper/SnapperTmpl.h"
 #include "snapper/SnapperDefines.h"
+#include "snapper/Acls.h"
 
 
 namespace snapper
@@ -450,10 +451,10 @@ namespace snapper
 	if (status & CREATED) status = CREATED;
 	if (status & DELETED) status = DELETED;
 
-	if (status & (CONTENT | PERMISSIONS | USER | GROUP | XATTRS))
+	if (status & (CONTENT | PERMISSIONS | USER | GROUP | XATTRS | ACL))
 	{
 	    // TODO check for content sometimes not required
-	    status &= ~(CONTENT | PERMISSIONS | USER | GROUP | XATTRS);
+	    status &= ~(CONTENT | PERMISSIONS | USER | GROUP | XATTRS | ACL);
 
 	    string dirname = snapper::dirname(name);
 	    string basename = snapper::basename(name);
@@ -546,7 +547,7 @@ namespace snapper
 	else
 	{
 	    node->status &= ~(CREATED | DELETED);
-	    node->status |= CONTENT | PERMISSIONS | USER | GROUP | XATTRS;
+	    node->status |= CONTENT | PERMISSIONS | USER | GROUP | XATTRS | ACL;
 	}
     }
 
@@ -679,7 +680,7 @@ namespace snapper
 		else
 		{
 		    node->status &= ~(CREATED | DELETED);
-		    node->status |= CONTENT | PERMISSIONS | USER | GROUP | XATTRS;
+		    node->status |= CONTENT | PERMISSIONS | USER | GROUP | XATTRS | ACL;
 		}
 
 		merge(processor, &it->second, from, to, x);
@@ -697,7 +698,7 @@ namespace snapper
 		else
 		{
 		    node->status &= ~(CREATED | DELETED);
-		    node->status |= CONTENT | PERMISSIONS | USER | GROUP | XATTRS;
+		    node->status |= CONTENT | PERMISSIONS | USER | GROUP | XATTRS | ACL;
 		}
 
 		merge(processor, &it->second, from, to, x);
@@ -854,6 +855,14 @@ namespace snapper
 
 	tree_node* node = processor->files.insert(path);
 	node->status |= XATTRS;
+
+	if (is_acl_signature(name))
+	{
+	    #ifdef DEBUG_PROCESS
+		y2deb("adding acl flag, signature:'" << name << "'");
+	    #endif
+	    node->status |= ACL;
+	}
 #endif
 
 	return 0;
@@ -872,6 +881,14 @@ namespace snapper
 
 	tree_node* node = processor->files.insert(path);
 	node->status |= XATTRS;
+
+	if (is_acl_signature(name))
+	{
+	    #ifdef DEBUG_PROCESS
+		y2deb("adding acl flag, signature:'" << name << "'");
+	    #endif
+	    node->status |= ACL;
+	}
 #endif
 
 	return 0;
diff -rupN snapper-0.1.7.old/snapper/Compare.cc snapper-0.1.7/snapper/Compare.cc
--- snapper-0.1.7.old/snapper/Compare.cc	2014-02-25 15:58:19.706868125 +0100
+++ snapper-0.1.7/snapper/Compare.cc	2014-02-25 15:58:48.406755050 +0100
@@ -38,6 +38,7 @@
 #include "snapper/Compare.h"
 #include "snapper/Exception.h"
 #include "snapper/XAttributes.h"
+#include "snapper/Acls.h"
 
 
 namespace snapper
@@ -222,10 +223,7 @@ namespace snapper
 #ifdef ENABLE_XATTRS
 	if (file1.xaSupported() && file2.xaSupported())
 	{
-	    if (!cmpFilesXattrs(file1, file2))
-	    {
-		status |= XATTRS;
-	    }
+	    status |= cmpFilesXattrs(file1, file2);
 	}
 #endif
 
@@ -467,19 +465,34 @@ namespace snapper
     }
 
 
-    bool
+    unsigned int
     cmpFilesXattrs(const SFile& file1, const SFile& file2)
     {
         try
         {
 	    XAttributes xa(file1);
 	    XAttributes xb(file2);
-	    return xa == xb;
+
+	    if (xa == xb)
+	    {
+		return 0;
+	    }
+	    else
+	    {
+		unsigned int status = XATTRS;
+
+		CompareAcls acl_a(xa);
+		CompareAcls acl_b(xb);
+
+		status |= (acl_a == acl_b) ? 0 : ACL;
+
+		return status;
+	    }
         }
 	catch (const XAttributesException& e)
         {
-            y2err("extended attributes compare failed");
-	    return false;
+	    y2err("extended attributes or ACL compare failed");
+	    return (XATTRS | ACL);
 	}
     }
 
diff -rupN snapper-0.1.7.old/snapper/Compare.h snapper-0.1.7/snapper/Compare.h
--- snapper-0.1.7.old/snapper/Compare.h	2014-02-25 15:58:19.707868122 +0100
+++ snapper-0.1.7/snapper/Compare.h	2014-02-25 15:58:48.406755050 +0100
@@ -48,7 +48,9 @@ namespace snapper
     void
     cmpDirs(const SDir& dir1, const SDir& dir2, cmpdirs_cb_t cb);
 
-    bool
+    /* Compares the two files extended attributes and ACLs.
+       Returns 0 or XATTRS or (XATTRS | ACL) */
+    unsigned int
     cmpFilesXattrs(const SFile&, const SFile&);
 
 }
diff -rupN snapper-0.1.7.old/snapper/Exception.h snapper-0.1.7/snapper/Exception.h
--- snapper-0.1.7.old/snapper/Exception.h	2014-02-25 15:58:19.705868129 +0100
+++ snapper-0.1.7/snapper/Exception.h	2014-02-25 15:58:48.406755050 +0100
@@ -68,6 +68,12 @@ namespace snapper
 	virtual const char* what() const throw() { return "IO error"; }
     };
 
+    struct AclException : public IOErrorException
+    {
+	explicit AclException() throw() {}
+	virtual const char* what() const throw() { return "ACL error"; }
+    };
+
     struct ProgramNotInstalledException : public SnapperException
     {
 	explicit ProgramNotInstalledException(const char* msg) throw() : msg(msg) {}
diff -rupN snapper-0.1.7.old/snapper/File.cc snapper-0.1.7/snapper/File.cc
--- snapper-0.1.7.old/snapper/File.cc	2014-02-25 15:58:19.706868125 +0100
+++ snapper-0.1.7/snapper/File.cc	2014-02-25 15:58:48.407755046 +0100
@@ -40,6 +40,7 @@
 #include "snapper/Compare.h"
 #include "snapper/Exception.h"
 #include "snapper/XAttributes.h"
+#include "snapper/Acls.h"
 
 
 namespace snapper
@@ -540,6 +541,8 @@ namespace snapper
             XAModification xa_mod(xa_src, xa_dest);
             y2deb("xa_modmap(xa_dest) object: " << xa_mod);
 
+	    xa_mod.filterOutAcls();
+
             xaCreated = xa_mod.getXaCreateNum();
             xaDeleted = xa_mod.getXaDeleteNum();
             xaReplaced = xa_mod.getXaReplaceNum();
@@ -556,6 +559,28 @@ namespace snapper
         return ret_val;
     }
 
+
+    bool
+    File::modifyAcls()
+    {
+	bool ret_val;
+
+	try
+	{
+	    Acls acl(getAbsolutePath(LOC_PRE));
+	    acl.serializeTo(getAbsolutePath(LOC_SYSTEM));
+
+	    ret_val = true;
+	}
+	catch (const AclException& e)
+	{
+	    ret_val = false;
+	}
+
+	return ret_val;
+    }
+
+
     XAUndoStatistic& operator+=(XAUndoStatistic &out, const XAUndoStatistic &src)
     {
         out.numCreate += src.numCreate;
@@ -628,6 +653,12 @@ namespace snapper
             if (!modifyXattributes())
                 error = true;
         }
+
+        if (getPreToPostStatus() & (ACL | TYPE | DELETED))
+	{
+	    if (!modifyAcls())
+		error = true;
+	}
 #endif
 
 	pre_to_system_status = (unsigned int) -1;
@@ -727,7 +758,8 @@ namespace snapper
 	ret += status & PERMISSIONS ? "p" : ".";
 	ret += status & USER ? "u" : ".";
 	ret += status & GROUP ? "g" : ".";
-        ret += status & XATTRS ? "x" : ".";
+	ret += status & XATTRS ? "x" : ".";
+	ret += status & ACL ? "a" : ".";
 
 	return ret;
     }
@@ -768,10 +800,16 @@ namespace snapper
 	}
 
 	if (str.length() >= 5)
-        {
-            if (str[4] == 'x')
-                ret |= XATTRS;
-        }
+	{
+	    if (str[4] == 'x')
+		ret |= XATTRS;
+	}
+
+	if (str.length() >= 6)
+	{
+	    if (str[5] == 'a')
+		ret |= ACL;
+	}
 
 	return ret;
     }
diff -rupN snapper-0.1.7.old/snapper/File.h snapper-0.1.7/snapper/File.h
--- snapper-0.1.7.old/snapper/File.h	2014-02-25 15:58:19.707868122 +0100
+++ snapper-0.1.7/snapper/File.h	2014-02-25 15:58:48.407755046 +0100
@@ -39,7 +39,7 @@ namespace snapper
     enum StatusFlags
     {
 	CREATED = 1, DELETED = 2, TYPE = 4, CONTENT = 8, PERMISSIONS = 16, USER = 32,
-	GROUP = 64, XATTRS = 128
+	GROUP = 64, XATTRS = 128, ACL = 256
     };
 
     enum Cmp
@@ -156,6 +156,7 @@ namespace snapper
 	bool undo;
 
 	bool modifyXattributes();
+	bool modifyAcls();
 
 	unsigned int xaCreated;
 	unsigned int xaDeleted;
diff -rupN snapper-0.1.7.old/snapper/Makefile.am snapper-0.1.7/snapper/Makefile.am
--- snapper-0.1.7.old/snapper/Makefile.am	2014-02-25 15:58:19.706868125 +0100
+++ snapper-0.1.7/snapper/Makefile.am	2014-02-25 15:59:02.217700638 +0100
@@ -26,12 +26,12 @@ libsnapper_la_SOURCES =					\
 	SystemCmd.cc		SystemCmd.h		\
 	AsciiFile.cc		AsciiFile.h		\
 	Regex.cc		Regex.h			\
+	Acls.cc			Acls.h			\
 	Exception.h					\
 	SnapperTmpl.h					\
 	SnapperTypes.h					\
 	SnapperDefines.h				\
-	Version.h					\
-	$(TMP_XA)
+	Version.h
 
 
 if ENABLE_BTRFS
@@ -53,7 +53,7 @@ endif
 
 
 libsnapper_la_LDFLAGS = -version-info @LIBVERSION_INFO@
-libsnapper_la_LIBADD = -lboost_thread-mt -lboost_system-mt -lxml2 -lz -lm
+libsnapper_la_LIBADD = -lboost_thread-mt -lboost_system-mt -lxml2 -lz -lm -lacl
 
 pkgincludedir = $(includedir)/snapper
 
diff -rupN snapper-0.1.7.old/snapper/XAttributes.cc snapper-0.1.7/snapper/XAttributes.cc
--- snapper-0.1.7.old/snapper/XAttributes.cc	2014-02-25 15:58:19.705868129 +0100
+++ snapper-0.1.7/snapper/XAttributes.cc	2014-02-25 15:58:48.408755043 +0100
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) [2013] Red Hat, Inc.
+ * Copyright (c) [2013-2014] Red Hat, Inc.
  *
  * All Rights Reserved.
  *
@@ -29,15 +29,51 @@
 #include <errno.h>
 #include <iomanip>
 #include <boost/scoped_array.hpp>
+#include <algorithm>
 
 #include "snapper/AppUtil.h"
 #include "snapper/Exception.h"
 #include "snapper/Log.h"
 #include "snapper/XAttributes.h"
+#include "snapper/Acls.h"
+#include "snapper/SnapperTmpl.h"
 
 
 namespace snapper
 {
+    struct FilterAclsHelper
+    {
+	FilterAclsHelper(const vector<string>& acl_sigs)
+	    : acl_sigs(acl_sigs) {}
+
+	bool operator()(const xa_pair_t& pair)
+	{
+	    return contains(acl_sigs, pair.first);
+	}
+
+	bool operator()(const string& name)
+	{
+	    return contains(acl_sigs, name);
+	}
+
+	const vector<string>& acl_sigs;
+    };
+
+
+    struct InsertAclsHelper
+    {
+	InsertAclsHelper(xa_map_t& xamap, const vector<string>& acl_sigs)
+	: map(xamap), acl_sigs(acl_sigs) {}
+	void operator()(const xa_pair_t& xapair)
+	{
+	    if (contains(acl_sigs, xapair.first))
+		map.insert(xapair);
+	}
+
+	xa_map_t& map;
+	const vector<string>& acl_sigs;
+    };
+
 
     XAttributes::XAttributes(const string &path)
     {
@@ -73,6 +109,7 @@ namespace snapper
             // move beyond separating '\0' char
             pos += name.length() + 1;
 
+
             ssize_t v_size = lgetxattr(path.c_str(), name.c_str(), NULL, 0);
             if (v_size < 0)
             {
@@ -180,6 +217,7 @@ namespace snapper
         return (this == &xa) ? true : (this->xamap == xa.xamap);
     }
 
+
     ostream&
     operator<<(ostream &out, const XAttributes &xa)
     {
@@ -194,6 +232,7 @@ namespace snapper
         return out;
     }
 
+
     ostream&
     operator<<(ostream &out, const xa_value_t &xavalue)
     {
@@ -262,14 +301,17 @@ namespace snapper
 	    y2deb("adding create operation for " << src_cit->first);
             create_vec.push_back(xa_pair_t(src_cit->first, src_cit->second));
 	}
+
     }
 
+
     bool
     XAModification::empty() const
     {
 	return create_vec.empty() && delete_vec.empty() && replace_vec.empty();
     }
 
+
     bool
     XAModification::serializeTo(const string &dest) const
     {
@@ -336,24 +378,28 @@ namespace snapper
 	return true;
     }
 
+
     unsigned int
     XAModification::getXaCreateNum() const
     {
         return create_vec.size();
     }
 
+
     unsigned int
     XAModification::getXaDeleteNum() const
     {
         return delete_vec.size();
     }
 
+
     unsigned int
     XAModification::getXaReplaceNum() const
     {
         return replace_vec.size();
     }
 
+
     void
     XAModification::printTo(ostream& out, bool diff) const
     {
@@ -381,16 +427,46 @@ namespace snapper
 	}
     }
 
+
     void
     XAModification::dumpDiffReport(ostream& out) const
     {
 	printTo(out, true);
     }
 
+
     ostream&
     operator<<(ostream &out, const XAModification &xa_mod)
     {
 	xa_mod.printTo(out, false);
         return out;
     }
+
+
+    CompareAcls::CompareAcls(const XAttributes& xa)
+    {
+	std::for_each(xa.cbegin(), xa.cend(), InsertAclsHelper(xamap, _acl_signatures));
+    }
+
+
+    bool
+    CompareAcls::operator==(const CompareAcls& acls) const
+    {
+	return (this == &acls) ? true : (this->xamap == acls.xamap);
+    }
+
+
+    void
+    XAModification::filterOutAcls()
+    {
+	FilterAclsHelper fhelper(_acl_signatures);
+
+	create_vec.erase(std::remove_if(create_vec.begin(), create_vec.end(), fhelper),
+			 create_vec.end());
+	delete_vec.erase(std::remove_if(delete_vec.begin(), delete_vec.end(), fhelper),
+			 delete_vec.end());
+	replace_vec.erase(std::remove_if(replace_vec.begin(), replace_vec.end(), fhelper),
+			  replace_vec.end());
+    }
+
 }
diff -rupN snapper-0.1.7.old/snapper/XAttributes.h snapper-0.1.7/snapper/XAttributes.h
--- snapper-0.1.7.old/snapper/XAttributes.h	2014-02-25 15:58:19.706868125 +0100
+++ snapper-0.1.7/snapper/XAttributes.h	2014-02-25 15:58:48.409755039 +0100
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) [2013] Red Hat, Inc.
+ * Copyright (c) [2013-2014] Red Hat, Inc.
  *
  * All Rights Reserved.
  *
@@ -33,65 +33,76 @@
 
 namespace snapper
 {
-	using std::map;
-	using std::string;
-	using std::pair;
-	using std::ostream;
-	using std::vector;
-
-	typedef vector<uint8_t> xa_value_t;
-	typedef map<string, xa_value_t> xa_map_t;
-	typedef pair<string, xa_value_t> xa_pair_t;
-        typedef vector<xa_pair_t> xa_mod_vec_t;
-	typedef vector<string> xa_del_vec_t;
-
-        // iterators
-	typedef xa_map_t::const_iterator xa_map_citer;
-        typedef xa_mod_vec_t::const_iterator xa_mod_vec_citer;
-	typedef xa_del_vec_t::const_iterator xa_del_vec_citer;
-
-	class XAttributes
-	{
-	private:
-            xa_map_t xamap;
-        public:
-            XAttributes(const string&);
-	    XAttributes(const SFile& dir);
-
-            xa_map_citer cbegin() const { return xamap.begin(); }
-            xa_map_citer cend() const { return xamap.end(); }
-
-            bool operator==(const XAttributes&) const;
-	};
-
-        class XAModification
-        {
-        private:
-	    xa_mod_vec_t create_vec;
-	    xa_del_vec_t delete_vec;
-	    xa_mod_vec_t replace_vec;
-
-	    void printTo(ostream&, bool) const;
-        public:
-
-            XAModification(const XAttributes&, const XAttributes&);
-
-            bool empty() const;
-            bool serializeTo(const string&) const;
-
-            unsigned int getXaCreateNum() const;
-            unsigned int getXaDeleteNum() const;
-            unsigned int getXaReplaceNum() const;
-
-	    // this will generate diff report
-	    void dumpDiffReport(ostream&) const;
-
-	    // this will print out the class content
-            friend ostream& operator<<(ostream&, const XAModification&);
-        };
+    using std::map;
+    using std::string;
+    using std::pair;
+    using std::ostream;
+    using std::vector;
+
+    typedef vector<uint8_t> xa_value_t;
+    typedef map<string, xa_value_t> xa_map_t;
+    typedef pair<string, xa_value_t> xa_pair_t;
+    typedef vector<xa_pair_t> xa_mod_vec_t;
+    typedef vector<string> xa_del_vec_t;
+
+    // iterators
+    typedef xa_map_t::const_iterator xa_map_citer;
+    typedef xa_mod_vec_t::const_iterator xa_mod_vec_citer;
+    typedef xa_del_vec_t::const_iterator xa_del_vec_citer;
+
+    class XAttributes
+    {
+    private:
+	xa_map_t xamap;
+    public:
+	XAttributes(const string&);
+	XAttributes(const SFile& dir);
+
+	xa_map_citer cbegin() const { return xamap.begin(); }
+	xa_map_citer cend() const { return xamap.end(); }
+
+	bool operator==(const XAttributes&) const;
+    };
+
+    class XAModification
+    {
+    private:
+	xa_mod_vec_t create_vec;
+	xa_del_vec_t delete_vec;
+	xa_mod_vec_t replace_vec;
+
+	void printTo(ostream&, bool) const;
+    public:
+
+	XAModification(const XAttributes&, const XAttributes&);
+
+	bool empty() const;
+	void filterOutAcls();
+	bool serializeTo(const string&) const;
+
+	unsigned int getXaCreateNum() const;
+	unsigned int getXaDeleteNum() const;
+	unsigned int getXaReplaceNum() const;
+
+	// this will generate diff report
+	void dumpDiffReport(ostream&) const;
+
+	// this will print out the class content
+	friend ostream& operator<<(ostream&, const XAModification&);
+    };
+
+    ostream& operator<<(ostream&, const XAttributes&);
+    ostream& operator<<(ostream&, const xa_value_t&);
+
+    class CompareAcls
+    {
+    private:
+	xa_map_t xamap;
+    public:
+	CompareAcls(const XAttributes& xa);
 
-        ostream& operator<<(ostream&, const XAttributes&);
-        ostream& operator<<(ostream&, const xa_value_t&);
+	bool operator==(const CompareAcls&) const;
+    };
 }
 
 
diff -rupN snapper-0.1.7.old/testsuite-real/Makefile.am snapper-0.1.7/testsuite-real/Makefile.am
--- snapper-0.1.7.old/testsuite-real/Makefile.am	2014-02-25 15:58:19.710868109 +0100
+++ snapper-0.1.7/testsuite-real/Makefile.am	2014-02-25 15:58:48.409755039 +0100
@@ -9,7 +9,7 @@ INCLUDES = -I$(top_srcdir)
 LDADD = ../snapper/libsnapper.la
 
 if HAVE_XATTRS
-TMP_XATST = xattrs1 xattrs2 xattrs3
+TMP_XATST = xattrs1 xattrs2 xattrs3 xattrs4
 endif
 
 noinst_SCRIPTS = run-all
@@ -38,6 +38,7 @@ error4_SOURCES = error4.cc common.h comm
 xattrs1_SOURCES = xattrs1.cc xattrs_utils.cc xattrs_utils.h common.h common.cc
 xattrs2_SOURCES = xattrs2.cc xattrs_utils.cc xattrs_utils.h common.h common.cc
 xattrs3_SOURCES = xattrs3.cc xattrs_utils.cc xattrs_utils.h common.h common.cc
+xattrs4_SOURCES = xattrs4.cc xattrs_utils.cc xattrs_utils.h common.h common.cc
 
 EXTRA_DIST = $(noinst_SCRIPTS)
 
diff -rupN snapper-0.1.7.old/testsuite-real/run-all snapper-0.1.7/testsuite-real/run-all
--- snapper-0.1.7.old/testsuite-real/run-all	2014-02-25 15:58:19.710868109 +0100
+++ snapper-0.1.7/testsuite-real/run-all	2014-02-25 15:58:48.409755039 +0100
@@ -38,3 +38,4 @@ run error4
 test -x xattrs1 && run xattrs1
 test -x xattrs2 && run xattrs2
 test -x xattrs3 && run xattrs3
+test -x xattrs4 && run xattrs4
diff -rupN snapper-0.1.7.old/testsuite-real/xattrs1.cc snapper-0.1.7/testsuite-real/xattrs1.cc
--- snapper-0.1.7.old/testsuite-real/xattrs1.cc	2014-02-25 15:58:19.710868109 +0100
+++ snapper-0.1.7/testsuite-real/xattrs1.cc	2014-02-25 15:58:48.410755035 +0100
@@ -28,7 +28,8 @@ main()
 
     check_undo_statistics(0, 1, 0);
 
-    check_xa_undo_statistics(2, 1, 1);
+    // do not count ACLs
+    check_xa_undo_statistics(1, 1, 1);
 
     check_undo_errors(0, 0, 0);
 
diff -rupN snapper-0.1.7.old/testsuite-real/xattrs4.cc snapper-0.1.7/testsuite-real/xattrs4.cc
--- snapper-0.1.7.old/testsuite-real/xattrs4.cc	1970-01-01 01:00:00.000000000 +0100
+++ snapper-0.1.7/testsuite-real/xattrs4.cc	2014-02-25 15:58:48.410755035 +0100
@@ -0,0 +1,41 @@
+
+#include "common.h"
+
+using namespace std;
+
+int
+main()
+{
+    setup();
+
+    run_command("touch file1");
+    run_command("mkdir dir1");
+    run_command("mkdir no_default");
+    run_command("setfacl -b file1");
+    run_command("setfacl -k dir1");
+    run_command("setfacl -k no_default");
+    run_command("setfacl -m u:nobody:rw file1");
+    run_command("setfacl -d -m u:nobody:w dir1");
+
+    first_snapshot();
+
+    run_command("setfacl -b file1");
+    run_command("setfacl -k dir1");
+
+    second_snapshot();
+
+    undo();
+
+    check_undo_statistics(0, 2, 0);
+
+    // do not count ACLs
+    check_xa_undo_statistics(0, 0, 0);
+
+    check_undo_errors(0, 0, 0);
+
+    check_first();
+
+    cleanup();
+
+    exit(EXIT_SUCCESS);
+}
